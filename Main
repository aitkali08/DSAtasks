package Assignment3;

import java.util.*;

class MyHashTable<K, V> {
    private static class HashNode<K, V> {
        K key;
        V value;
        HashNode<K, V> next;

        public HashNode(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }

    private ArrayList<HashNode<K, V>> chainArray;
    private int numBuckets;
    private int size;

    public MyHashTable() {
        chainArray = new ArrayList<>();
        numBuckets = 10;
        size = 0;

        for (int i = 0; i < numBuckets; i++) {
            chainArray.add(null);
        }
    }

    private int hash(K key) {
        return Math.abs(key.hashCode()) % numBuckets;
    }

    public void put(K key, V value) {
        int index = hash(key);
        HashNode<K, V> head = chainArray.get(index);

        while (head != null) {
            if (head.key.equals(key)) {
                head.value = value;
                return;
            }
            head = head.next;
        }

        size++;
        head = chainArray.get(index);
        HashNode<K, V> newNode = new HashNode<>(key, value);
        newNode.next = head;
        chainArray.set(index, newNode);
    }

    public V get(K key) {
        int index = hash(key);
        HashNode<K, V> head = chainArray.get(index);

        while (head != null) {
            if (head.key.equals(key)) return head.value;
            head = head.next;
        }
        return null;
    }

    public V remove(K key) {
        int index = hash(key);
        HashNode<K, V> head = chainArray.get(index);
        HashNode<K, V> prev = null;

        while (head != null) {
            if (head.key.equals(key)) break;
            prev = head;
            head = head.next;
        }

        if (head == null) return null;

        size--;
        if (prev != null) prev.next = head.next;
        else chainArray.set(index, head.next);

        return head.value;
    }

    public boolean contains(V value) {
        for (HashNode<K, V> headNode : chainArray) {
            while (headNode != null) {
                if (headNode.value.equals(value)) return true;
                headNode = headNode.next;
            }
        }
        return false;
    }

    public K getKey(V value) {
        for (HashNode<K, V> headNode : chainArray) {
            while (headNode != null) {
                if (headNode.value.equals(value)) return headNode.key;
                headNode = headNode.next;
            }
        }
        return null;
    }

    public int size() {
        return size;
    }

    public int[] getChainDistribution() {
        int[] distribution = new int[numBuckets];
        for (int i = 0; i < numBuckets; i++) {
            int count = 0;
            HashNode<K, V> head = chainArray.get(i);
            while (head != null) {
                count++;
                head = head.next;
            }
            distribution[i] = count;
        }
        return distribution;
    }
}

class MyTestingClass {
    int id;

    public MyTestingClass(int id) {
        this.id = id;
    }

    @Override
    public int hashCode() {
        return id * 31; 
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        MyTestingClass that = (MyTestingClass) obj;
        return id == that.id;
    }
}

class Student {
    String name;
    int age;

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return name + ", " + age;
    }
}


class BST<K extends Comparable<K>, V> implements Iterable<Map.Entry<K, V>> {
    private class Node {
        K key;
        V val;
        Node left, right;

        Node(K key, V val) {
            this.key = key;
            this.val = val;
        }
    }

    private Node root;
    private int size;

    public void put(K key, V val) {
        root = put(root, key, val);
    }

    private Node put(Node x, K key, V val) {
        if (x == null) {
            size++;
            return new Node(key, val);
        }
        int cmp = key.compareTo(x.key);
        if (cmp < 0) x.left = put(x.left, key, val);
        else if (cmp > 0) x.right = put(x.right, key, val);
        else x.val = val;
        return x;
    }

    public V get(K key) {
        Node x = root;
        while (x != null) {
            int cmp = key.compareTo(x.key);
            if (cmp < 0) x = x.left;
            else if (cmp > 0) x = x.right;
            else return x.val;
        }
        return null;
    }

    public void delete(K key) {
        root = delete(root, key);
    }

    private Node delete(Node x, K key) {
        if (x == null) return null;
        int cmp = key.compareTo(x.key);
        if (cmp < 0) x.left = delete(x.left, key);
        else if (cmp > 0) x.right = delete(x.right, key);
        else {
            size--;
            if (x.right == null) return x.left;
            if (x.left == null) return x.right;

            Node temp = x;
            x = min(temp.right);
            x.right = deleteMin(temp.right);
            x.left = temp.left;
        }
        return x;
    }

    private Node deleteMin(Node x) {
        if (x.left == null) return x.right;
        x.left = deleteMin(x.left);
        return x;
    }

    private Node min(Node x) {
        while (x.left != null) x = x.left;
        return x;
    }

    public int size() {
        return size;
    }

    @Override
    public Iterator<Map.Entry<K, V>> iterator() {
        List<Map.Entry<K, V>> entries = new ArrayList<>();
        inOrder(root, entries);
        return entries.iterator();
    }

    private void inOrder(Node node, List<Map.Entry<K, V>> entries) {
        if (node != null) {
            inOrder(node.left, entries);
            entries.add(new AbstractMap.SimpleEntry<>(node.key, node.val));
            inOrder(node.right, entries);
        }
    }
}

class Main {
    public static void main(String[] args) {
        MyHashTable<MyTestingClass, Student> table = new MyHashTable<>();
        Random rand = new Random();
        for (int i = 0; i < 10000; i++) {
            MyTestingClass key = new MyTestingClass(rand.nextInt(10000));
            Student val = new Student("Name" + i, rand.nextInt(30));
            table.put(key, val);
        }
        int[] distribution = table.getChainDistribution();
        System.out.println("Hash Table Chain Distribution:");
        for (int i = 0; i < distribution.length; i++) {
            System.out.println("Bucket " + i + ": " + distribution[i]);
        }

        BST<Integer, String> bst = new BST<>();
        bst.put(10, "Ten");
        bst.put(20, "Twenty");
        bst.put(5, "Five");

        System.out.println("\nBST In-Order Traversal:");
        for (var e : bst) {
            System.out.println("key is " + e.getKey() + " and value is " + e.getValue());
        }
    }
}
